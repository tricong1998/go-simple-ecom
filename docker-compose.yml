version: "3.9"

services:
  # Create service with RabbitMQ.
  message-broker:
    image: rabbitmq:3-management-alpine
    container_name: message-broker
    ports:
      - "${AMQP_SERVER_PORT}:${AMQP_SERVER_PORT}" # for sender and consumer connections
      - "${AMQP_SERVER_GUI_PORT}:${AMQP_SERVER_GUI_PORT}" # for serve RabbitMQ GUI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - go-ecom-network  
    healthcheck:
      test: >
        /bin/sh -c "rabbitmqctl status"
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    # build:
    #   context: ./postgres
    #   dockerfile: Dockerfile
    container_name: postgres
    image: postgres:16-alpine
    ports:
      - ${DB_PORT}:${DOCKER_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DOCKER_DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${USER_DB_NAME},${ORDER_DB_NAME},${PAYMENT_DB_NAME},${PRODUCT_DB_NAME}
    networks:
      - go-ecom-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: >
        /bin/sh -c "
        pg_isready -d ${USER_DB_NAME} -U ${DB_USER} &&
        pg_isready -d ${ORDER_DB_NAME} -U ${DB_USER} &&
        pg_isready -d ${PAYMENT_DB_NAME} -U ${DB_USER} &&
        pg_isready -d ${PRODUCT_DB_NAME} -U ${DB_USER}
        "      
      interval: 5s
      timeout: 5s
      retries: 5

  order-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${ORDER_SERVER_PORT}:${ORDER_SERVER_PORT}"
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DOCKER_DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DOCKER_DB_PASSWORD}
      - DB_NAME=${ORDER_DB_NAME}
      - AMQP_SERVER_HOST=message-broker
      - ORDER_USER_GRPC_SERVER_HOST=user-service
      - ORDER_PAYMENT_GRPC_SERVER_HOST=payment-service
      - ORDER_PRODUCT_GRPC_SERVER_HOST=product-service
    depends_on:
      - message-broker
      - postgres
    networks:
      - go-ecom-network
    command: ./order
    restart: always

  user-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVER_PORT}:${USER_SERVER_PORT}"
      - "${USER_GRPC_SERVER_PORT}:${USER_GRPC_SERVER_PORT}"
    depends_on:
      - message-broker
      - postgres
    networks:
      - go-ecom-network
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DOCKER_DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DOCKER_DB_PASSWORD}
      - DB_NAME=${USER_DB_NAME}
      - AMQP_SERVER_HOST=message-broker
    command: ./user
    restart: always
  payment-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PAYMENT_SERVER_PORT}:${PAYMENT_SERVER_PORT}"
      - "${PAYMENT_GRPC_SERVER_PORT}:${PAYMENT_GRPC_SERVER_PORT}"
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DOCKER_DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DOCKER_DB_PASSWORD}
      - DB_NAME=${PAYMENT_DB_NAME}
    depends_on:
      - message-broker
      - postgres
    networks:
      - go-ecom-network
    command: ./payment
    restart: always

  product-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PRODUCT_SERVER_PORT}:${PRODUCT_SERVER_PORT}"
      - "${PRODUCT_GRPC_SERVER_PORT}:${PRODUCT_GRPC_SERVER_PORT}"
    depends_on:
      - postgres
    networks:
      - go-ecom-network
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DOCKER_DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DOCKER_DB_PASSWORD}
      - DB_NAME=${PRODUCT_DB_NAME}
    command: ./product
    restart: always    

volumes:
  rabbitmq_data:
  postgres-data:

networks:
  go-ecom-network: