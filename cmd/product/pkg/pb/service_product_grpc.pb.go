// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: service_product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductGrpc_ReadProduct_FullMethodName           = "/pb.ProductGrpc/ReadProduct"
	ProductGrpc_UpdateProductQuantity_FullMethodName = "/pb.ProductGrpc/UpdateProductQuantity"
)

// ProductGrpcClient is the client API for ProductGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductGrpcClient interface {
	ReadProduct(ctx context.Context, in *ReadProductRequest, opts ...grpc.CallOption) (*ReadProductResponse, error)
	UpdateProductQuantity(ctx context.Context, in *UpdateProductQuantityRequest, opts ...grpc.CallOption) (*UpdateProductQuantityResponse, error)
}

type productGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewProductGrpcClient(cc grpc.ClientConnInterface) ProductGrpcClient {
	return &productGrpcClient{cc}
}

func (c *productGrpcClient) ReadProduct(ctx context.Context, in *ReadProductRequest, opts ...grpc.CallOption) (*ReadProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadProductResponse)
	err := c.cc.Invoke(ctx, ProductGrpc_ReadProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productGrpcClient) UpdateProductQuantity(ctx context.Context, in *UpdateProductQuantityRequest, opts ...grpc.CallOption) (*UpdateProductQuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductQuantityResponse)
	err := c.cc.Invoke(ctx, ProductGrpc_UpdateProductQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductGrpcServer is the server API for ProductGrpc service.
// All implementations must embed UnimplementedProductGrpcServer
// for forward compatibility.
type ProductGrpcServer interface {
	ReadProduct(context.Context, *ReadProductRequest) (*ReadProductResponse, error)
	UpdateProductQuantity(context.Context, *UpdateProductQuantityRequest) (*UpdateProductQuantityResponse, error)
	mustEmbedUnimplementedProductGrpcServer()
}

// UnimplementedProductGrpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductGrpcServer struct{}

func (UnimplementedProductGrpcServer) ReadProduct(context.Context, *ReadProductRequest) (*ReadProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProduct not implemented")
}
func (UnimplementedProductGrpcServer) UpdateProductQuantity(context.Context, *UpdateProductQuantityRequest) (*UpdateProductQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductQuantity not implemented")
}
func (UnimplementedProductGrpcServer) mustEmbedUnimplementedProductGrpcServer() {}
func (UnimplementedProductGrpcServer) testEmbeddedByValue()                     {}

// UnsafeProductGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductGrpcServer will
// result in compilation errors.
type UnsafeProductGrpcServer interface {
	mustEmbedUnimplementedProductGrpcServer()
}

func RegisterProductGrpcServer(s grpc.ServiceRegistrar, srv ProductGrpcServer) {
	// If the following call pancis, it indicates UnimplementedProductGrpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductGrpc_ServiceDesc, srv)
}

func _ProductGrpc_ReadProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGrpcServer).ReadProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductGrpc_ReadProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGrpcServer).ReadProduct(ctx, req.(*ReadProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductGrpc_UpdateProductQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGrpcServer).UpdateProductQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductGrpc_UpdateProductQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGrpcServer).UpdateProductQuantity(ctx, req.(*UpdateProductQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductGrpc_ServiceDesc is the grpc.ServiceDesc for ProductGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProductGrpc",
	HandlerType: (*ProductGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadProduct",
			Handler:    _ProductGrpc_ReadProduct_Handler,
		},
		{
			MethodName: "UpdateProductQuantity",
			Handler:    _ProductGrpc_UpdateProductQuantity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_product.proto",
}
