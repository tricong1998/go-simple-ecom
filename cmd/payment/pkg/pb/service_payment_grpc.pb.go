// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: service_payment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentGrpc_ReadPayment_FullMethodName   = "/pb.PaymentGrpc/ReadPayment"
	PaymentGrpc_CreatePayment_FullMethodName = "/pb.PaymentGrpc/CreatePayment"
)

// PaymentGrpcClient is the client API for PaymentGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentGrpcClient interface {
	ReadPayment(ctx context.Context, in *ReadPaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
}

type paymentGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentGrpcClient(cc grpc.ClientConnInterface) PaymentGrpcClient {
	return &paymentGrpcClient{cc}
}

func (c *paymentGrpcClient) ReadPayment(ctx context.Context, in *ReadPaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payment)
	err := c.cc.Invoke(ctx, PaymentGrpc_ReadPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGrpcClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentGrpc_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentGrpcServer is the server API for PaymentGrpc service.
// All implementations must embed UnimplementedPaymentGrpcServer
// for forward compatibility.
type PaymentGrpcServer interface {
	ReadPayment(context.Context, *ReadPaymentRequest) (*Payment, error)
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	mustEmbedUnimplementedPaymentGrpcServer()
}

// UnimplementedPaymentGrpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentGrpcServer struct{}

func (UnimplementedPaymentGrpcServer) ReadPayment(context.Context, *ReadPaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPayment not implemented")
}
func (UnimplementedPaymentGrpcServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentGrpcServer) mustEmbedUnimplementedPaymentGrpcServer() {}
func (UnimplementedPaymentGrpcServer) testEmbeddedByValue()                     {}

// UnsafePaymentGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentGrpcServer will
// result in compilation errors.
type UnsafePaymentGrpcServer interface {
	mustEmbedUnimplementedPaymentGrpcServer()
}

func RegisterPaymentGrpcServer(s grpc.ServiceRegistrar, srv PaymentGrpcServer) {
	// If the following call pancis, it indicates UnimplementedPaymentGrpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentGrpc_ServiceDesc, srv)
}

func _PaymentGrpc_ReadPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGrpcServer).ReadPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGrpc_ReadPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGrpcServer).ReadPayment(ctx, req.(*ReadPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGrpc_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGrpcServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGrpc_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGrpcServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentGrpc_ServiceDesc is the grpc.ServiceDesc for PaymentGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PaymentGrpc",
	HandlerType: (*PaymentGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadPayment",
			Handler:    _PaymentGrpc_ReadPayment_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentGrpc_CreatePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_payment.proto",
}
